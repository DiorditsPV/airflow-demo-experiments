# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.5.3
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
version: '3.8'

x-common-env: &common-env
  TZ: ${TZ:-UTC}
  AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS: 'false'
  AIRFLOW__CORE__EXECUTOR: CeleryExecutor
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}
  AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
  AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}
  AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY:-your-secret-key}

services:
  webserver:
    container_name: airflow-webserver
    build:
      context: .
      dockerfile: Dockerfile
      args:
        AIRFLOW_VERSION: ${AIRFLOW_VERSION}
    platform: linux/amd64
    ports:
      - "${AIRFLOW_PORT:-8080}:8080"
    volumes:
      - ${BASE_PATH:-./}/dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config/:/opt/airflow/airflow.cfg
    environment:
      <<: *common-env
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    deploy:
      resources:
        limits:
          memory: ${AIRFLOW_MEMORY_LIMIT:-4g}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  scheduler:
    container_name: airflow-scheduler
    build:
      context: .
      dockerfile: Dockerfile
      args:
        AIRFLOW_VERSION: ${AIRFLOW_VERSION}
    command: airflow scheduler
    volumes:
      - ${BASE_PATH:-./}/dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config/:/opt/airflow/airflow.cfg
    environment:
      <<: *common-env
    deploy:
      resources:
        limits:
          memory: ${AIRFLOW_MEMORY_LIMIT:-2g}
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on:
      - webserver

  worker:
    container_name: airflow-worker
    build:
      context: .
      dockerfile: Dockerfile
      args:
        AIRFLOW_VERSION: ${AIRFLOW_VERSION}
    command: airflow celery worker
    volumes:
      - ${BASE_PATH:-./}/dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config/:/opt/airflow/airflow.cfg
    environment:
      <<: *common-env
    deploy:
      resources:
        limits:
          memory: ${WORKER_MEMORY_LIMIT:-2g}
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on:
      - webserver

  redis:
    image: redis:alpine
    container_name: airflow-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: unless-stopped

  flower:
    image: mher/flower
    container_name: airflow-flower
    environment:
      - FLOWER_PORT=5555
      - CELERY_BROKER_URL=redis://:@redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped

  db:
    container_name: airflow-postgres
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: ${DB_USER:-airflow}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-airflow}
      POSTGRES_DB: ${DB_NAME:-airflow}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER:-airflow}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    name: airflow-postgres-data

networks:
  default:
    name: airflow-network